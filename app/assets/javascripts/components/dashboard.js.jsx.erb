var MeasurementBox = React.createClass({
  interval: 2000,
  loadLocation: function(path, propPrefix) {
    $.ajax({
      url: path,
      dataType: 'json',
      cache: true,
      success: function(data) {
        var newState = {};
        newState[propPrefix + "Id"] = data.id;
        newState[propPrefix + "City"] = data.city;
        this.setState(newState);
        if (!data.city) { // retry until we get the city
          setTimeout(this.loadLocation, this.interval, path, propPrefix);
        }
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(status, err.toString());
      }
    });
  },

  getInitialState: function() {
    return {};
  },
  componentDidMount: function() {
    this.loadLocation("/locations/current", "client");
    this.loadLocation("/locations/server", "server");
  },

  render: function() {
    return (
      <div className="measurementBox">
        <p>
        Ping the server at <ServerCity city={this.state.serverCity} /> from <ClientCity city={this.state.clientCity} />!
        </p>
        <PingBox serverId={this.state.serverId} clientId={this.state.clientId} />
      </div>
    );
  }
});

var ClientCity = React.createClass({
  render: function() {
    var city = this.props.city;
    if (!city) {
      city = "unknown location";
    }
    return (
      <span className="clientCity">{city}</span>
    );
  }
});

var ServerCity = React.createClass({
  render: function() {
    var city = this.props.city;
    if (!city) {
      city = "unknown location";
    }
    return (
      <span className="serverCity">{city}</span>
    );
  }
});

var ping = {
  pingButton: "Ping",
  pingingButton: "......",
  postButton: "Post",
  result: null,
  serverId: null,
  clientId: null
};

var PingBox = React.createClass({
  getInitialState: function() {
    return {
      buttonValue: ping.pingButton,
      buttonDisabled: false,
      resultValue: "",
      progressValue: ""
    };
  },
  handleSubmit: function(e) {
    e.preventDefault();
    if (this.state.buttonValue == ping.pingButton) {
      var ping_progress = "";
      this.setState({
        buttonValue: ping.pingingButton,
        buttonDisabled: true,
        resultValue: "",
        progressValue: ping_progress
      });
      Pinger.measure.call(this,
        "<%= path_to_javascript 'ping' %>",
        function(lag){
          ping_progress = ping_progress + " " + lag;
          this.setState({progressValue: ping_progress});
        }.bind(this),
        function(lag){
          ping.result = lag;
          this.setState({
            buttonValue: ping.postButton,
            buttonDisabled: false,
            resultValue: lag
          });
        }.bind(this)
      );
    } else if (this.state.buttonValue == ping.postButton) {
      $.ajax({
        url: "/ping_results",
        type: "POST",
        dataType: 'json',
        cache: false,
        data: {
          ping_result: {
            lag_ms: ping.result,
            location_id: ping.clientId,
            server_location_id: ping.serverId
          }
        },
        success: function(data) {
          this.setState({
            buttonValue: ping.pingButton,
            resultValue: "",
            progressValue: ""
          });
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(status, err.toString());
        }
      });
    };
  },
  render: function() {
    ping.serverId = this.props.serverId;
    ping.clientId = this.props.clientId;
    return (
      <form className="PingBox" onSubmit={this.handleSubmit}>
        <input type="submit" id="button" value={this.state.buttonValue} disabled={this.state.buttonDisabled} />
        <input type="text" placeholder="Median" id="ping_result_lag_ms" value={this.state.resultValue} size="5" readOnly />
        <input type="text" placeholder="Progress" id="ping_progress" value={this.state.progressValue} size="24" readOnly />
        msec
      </form>
    );
  }
});
